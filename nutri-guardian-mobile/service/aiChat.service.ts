// ===========================
// === AI Chat Service for NutriGuardian
// ===========================

/**
 * Create a system instruction for the NutriGuardian AI chatbot
 * @returns {string}
 */
const createNutriGuardianSystemInstruction = () => {
  return (
    "B·∫°n l√† m·ªôt tr·ª£ l√Ω AI chuy√™n v·ªÅ dinh d∆∞·ª°ng v√† s·ª©c kh·ªèe c·ªßa ·ª©ng d·ª•ng NutriGuardian. " +
    "B·∫°n ch·ªâ tr·∫£ l·ªùi b·∫±ng **ti·∫øng Vi·ªát**, gi·ªçng ƒëi·ªáu th√¢n thi·ªán, chuy√™n nghi·ªáp v√† d·ªÖ hi·ªÉu. " +
    "Chuy√™n m√¥n c·ªßa b·∫°n bao g·ªìm: " +
    "- T∆∞ v·∫•n dinh d∆∞·ª°ng v√† ch·∫ø ƒë·ªô ƒÉn u·ªëng l√†nh m·∫°nh " +
    "- H∆∞·ªõng d·∫´n v·ªÅ d·ªã ·ª©ng th·ª±c ph·∫©m v√† c√°ch ph√≤ng tr√°nh " +
    "- G·ª£i √Ω c√¥ng th·ª©c n·∫•u ƒÉn ph√π h·ª£p v·ªõi t√¨nh tr·∫°ng s·ª©c kh·ªèe " +
    "- Th√¥ng tin v·ªÅ gi√° tr·ªã dinh d∆∞·ª°ng c·ªßa th·ª±c ph·∫©m " +
    "- L·ªùi khuy√™n v·ªÅ l·ªëi s·ªëng l√†nh m·∫°nh v√† t·∫≠p luy·ªán " +
    "N·∫øu ng∆∞·ªùi d√πng h·ªèi v·ªÅ ch·ªß ƒë·ªÅ kh√¥ng li√™n quan ƒë·∫øn dinh d∆∞·ª°ng, s·ª©c kh·ªèe ho·∫∑c th·ª±c ph·∫©m, " +
    "b·∫°n h√£y l·ªãch s·ª± chuy·ªÉn h∆∞·ªõng cu·ªôc tr√≤ chuy·ªán v·ªÅ chuy√™n m√¥n c·ªßa m√¨nh. " +
    "Khi c·∫ßn thi·∫øt, h√£y tr√¨nh b√†y th√¥ng tin d·∫°ng g·∫°ch ƒë·∫ßu d√≤ng ƒë·ªÉ d·ªÖ ƒë·ªçc. " +
    "Lu√¥n nh·∫Øc nh·ªü ng∆∞·ªùi d√πng tham kh·∫£o √Ω ki·∫øn b√°c sƒ© chuy√™n khoa khi c·∫ßn thi·∫øt."
  );
};

/**
 * Generate an answer from AI about nutrition and health
 * @param {string} message - User's message
 * @returns {Promise<string>} - AI response
 */
export const generateNutritionAnswerFromAI = async (message: string): Promise<string> => {
  try {
    const geminiApiKey = process.env.EXPO_PUBLIC_GEMINI
    const geminiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${geminiApiKey}`;

    const requestBody = {
      contents: [
        {
          parts: [
            {
              text: message,
            },
          ],
        },
      ],
      generationConfig: {
        maxOutputTokens: 800,
        temperature: 0.3,
        topP: 0.9,
        topK: 1,
      },
      safetySettings: [
        { 
          category: "HARM_CATEGORY_HARASSMENT", 
          threshold: "BLOCK_MEDIUM_AND_ABOVE" 
        },
        { 
          category: "HARM_CATEGORY_HATE_SPEECH", 
          threshold: "BLOCK_MEDIUM_AND_ABOVE" 
        },
        { 
          category: "HARM_CATEGORY_SEXUALLY_EXPLICIT", 
          threshold: "BLOCK_MEDIUM_AND_ABOVE" 
        },
        { 
          category: "HARM_CATEGORY_DANGEROUS_CONTENT", 
          threshold: "BLOCK_MEDIUM_AND_ABOVE" 
        },
      ],
      systemInstruction: {
        parts: [
          {
            text: createNutriGuardianSystemInstruction(),
          },
        ],
      },
    };

    console.log('Request URL:', geminiUrl);
    console.log('Request Body:', JSON.stringify(requestBody, null, 2));

    const response = await fetch(geminiUrl, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(requestBody),
    });

    console.log('Response Status:', response.status);
    console.log('Response Headers:', response.headers);

    if (!response.ok) {
      const errorText = await response.text();
      console.error('API Error Response:', errorText);
      throw new Error(`HTTP error! status: ${response.status}, message: ${errorText}`);
    }

    const data = await response.json();
    console.log('API Response:', JSON.stringify(data, null, 2));
    
    if (data.candidates && data.candidates[0] && data.candidates[0].content) {
      return data.candidates[0].content.parts[0].text;
    } else {
      console.error('Invalid response structure:', data);
      throw new Error('Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi h·ª£p l·ªá t·ª´ AI');
    }
  } catch (error) {
    console.error('Error calling Gemini API:', error);
    
    // Provide more specific error messages
    if (error instanceof Error) {
      if (error.message.includes('400')) {
        return 'Xin l·ªói, c√≥ v·∫•n ƒë·ªÅ v·ªõi y√™u c·∫ßu. Vui l√≤ng th·ª≠ r√∫t g·ªçn c√¢u h·ªèi ho·∫∑c th·ª≠ l·∫°i sau.';
      } else if (error.message.includes('401')) {
        return 'Xin l·ªói, c√≥ v·∫•n ƒë·ªÅ v·ªõi x√°c th·ª±c API. Vui l√≤ng li√™n h·ªá qu·∫£n tr·ªã vi√™n.';
      } else if (error.message.includes('429')) {
        return 'B·∫°n ƒë√£ g·ª≠i qu√° nhi·ªÅu y√™u c·∫ßu. Vui l√≤ng ƒë·ª£i m·ªôt ch√∫t r·ªìi th·ª≠ l·∫°i.';
      }
    }
    
    return 'Xin l·ªói, t√¥i ƒëang g·∫∑p m·ªôt ch√∫t v·∫•n ƒë·ªÅ k·ªπ thu·∫≠t. Vui l√≤ng th·ª≠ l·∫°i sau √≠t ph√∫t. Trong th·ªùi gian ch·ªù ƒë·ª£i, b·∫°n c√≥ th·ªÉ tham kh·∫£o th√¥ng tin dinh d∆∞·ª°ng trong ph·∫ßn "T√¨m hi·ªÉu" c·ªßa ·ª©ng d·ª•ng.';
  }
};

/**
 * Generate specific advice for food allergies
 * @param {string[]} allergens - List of user's allergens
 * @param {string} question - User's specific question
 * @returns {Promise<string>} - AI response with allergy-specific advice
 */
export const generateAllergyAdvice = async (allergens: string[], question: string): Promise<string> => {
  const allergenList = allergens.join(', ');
  const contextMessage = `
    Ng∆∞·ªùi d√πng b·ªã d·ªã ·ª©ng v·ªõi: ${allergenList}
    C√¢u h·ªèi: ${question}
    
    Vui l√≤ng ƒë∆∞a ra l·ªùi khuy√™n c·ª• th·ªÉ v·ªÅ ch·∫ø ƒë·ªô ƒÉn u·ªëng an to√†n v√† th·ª±c ph·∫©m thay th·∫ø ph√π h·ª£p.
  `;
  
  return generateNutritionAnswerFromAI(contextMessage);
};

/**
 * Get recipe suggestions based on dietary restrictions
 * @param {string} preferences - User's dietary preferences or restrictions
 * @returns {Promise<string>} - AI response with recipe suggestions
 */
export const getRecipeSuggestions = async (preferences: string): Promise<string> => {
  const message = `
    T√¥i c·∫ßn g·ª£i √Ω c√¥ng th·ª©c n·∫•u ƒÉn v·ªõi y√™u c·∫ßu sau: ${preferences}
    
    Vui l√≤ng ƒë∆∞a ra 2-3 c√¥ng th·ª©c ƒë∆°n gi·∫£n, bao g·ªìm nguy√™n li·ªáu v√† c√°ch l√†m c∆° b·∫£n.
  `;
  
  return generateNutritionAnswerFromAI(message);
};

/**
 * Test function to check if Gemini API is working
 * @returns {Promise<boolean>} - True if API is working
 */
export const testGeminiAPI = async (): Promise<boolean> => {
  try {
    const testResponse = await generateNutritionAnswerFromAI("Xin ch√†o");
    return testResponse.length > 0 && !testResponse.includes('v·∫•n ƒë·ªÅ k·ªπ thu·∫≠t');
  } catch (error) {
    console.error('API Test failed:', error);
    return false;
  }
};

/**
 * Fallback nutrition advice when AI is not available
 * @param {string} message - User's message
 * @returns {string} - Fallback response
 */
export const getFallbackNutritionAdvice = (message: string): string => {
  const lowerMessage = message.toLowerCase();
  
  if (lowerMessage.includes('d·ªã ·ª©ng') || lowerMessage.includes('allergy')) {
    return `**V·ªÅ v·∫•n ƒë·ªÅ d·ªã ·ª©ng th·ª±c ph·∫©m:**
    
*   **ƒê·ªçc k·ªπ nh√£n th√†nh ph·∫ßn:** Lu√¥n ki·ªÉm tra danh s√°ch th√†nh ph·∫ßn tr∆∞·ªõc khi ƒÉn
*   **Tr√°nh ph·∫£n ·ª©ng ch√©o:** M·ªôt s·ªë th·ª±c ph·∫©m c√≥ th·ªÉ g√¢y d·ªã ·ª©ng ch√©o
*   **Mang thu·ªëc d·ª± ph√≤ng:** Lu√¥n c√≥ s·∫µn thu·ªëc ch·ªëng d·ªã ·ª©ng khi c·∫ßn
*   **Tham kh·∫£o chuy√™n gia:** B√°c sƒ© chuy√™n khoa s·∫Ω t∆∞ v·∫•n ch·∫ø ƒë·ªô ƒÉn ph√π h·ª£p

**Quan tr·ªçng:** ƒê√¢y ch·ªâ l√† th√¥ng tin tham kh·∫£o, vui l√≤ng tham kh·∫£o √Ω ki·∫øn b√°c sƒ© chuy√™n khoa.`;
  }
  
  if (lowerMessage.includes('gi·∫£m c√¢n') || lowerMessage.includes('weight loss')) {
    return `**V·ªÅ gi·∫£m c√¢n l√†nh m·∫°nh:**
    
*   **Deficit calo h·ª£p l√Ω:** T·∫°o thi·∫øu h·ª•t 300-500 calo/ng√†y
*   **ƒê·ªß protein:** Duy tr√¨ c∆° b·∫Øp trong qu√° tr√¨nh gi·∫£m c√¢n
*   **TƒÉng rau xanh:** Gi·∫£m carb tinh ch·∫ø, tƒÉng ch·∫•t x∆°
*   **U·ªëng ƒë·ªß n∆∞·ªõc:** 2-3 l√≠t n∆∞·ªõc m·ªói ng√†y
*   **T·∫≠p luy·ªán ƒëa d·∫°ng:** K·∫øt h·ª£p cardio v√† t·∫≠p t·∫°

**L∆∞u √Ω:** Tham kh·∫£o chuy√™n gia dinh d∆∞·ª°ng ƒë·ªÉ c√≥ k·∫ø ho·∫°ch c√° nh√¢n h√≥a.`;
  }
  
  if (lowerMessage.includes('c√¥ng th·ª©c') || lowerMessage.includes('n·∫•u ƒÉn')) {
    return `**G·ª£i √Ω c√¥ng th·ª©c n·∫•u ƒÉn dinh d∆∞·ª°ng:**

*   **Salad quinoa:** Quinoa + rau xanh + protein + dressing olive oil
*   **Soup rau c·ªß:** C√† r√≥t + b√≠ ƒë·ªè + c√† r·ªët + n∆∞·ªõc d√πng x∆∞∆°ng
*   **G√† n∆∞·ªõng th·∫£o m·ªôc:** ·ª®c g√† + rosemary + thyme + khoai lang n∆∞·ªõng

**Nguy√™n t·∫Øc n·∫•u ƒÉn l√†nh m·∫°nh:**
*   √çt d·∫ßu m·ª°, nhi·ªÅu rau xanh
*   H·∫°n ch·∫ø mu·ªëi v√† ƒë∆∞·ªùng
*   ∆Øu ti√™n th·ª±c ph·∫©m t·ª± nhi√™n`;
  }
  
  return `**C·∫£m ∆°n b·∫°n ƒë√£ li√™n h·ªá v·ªõi NutriGuardian!** 
  
Hi·ªán t·∫°i h·ªá th·ªëng AI ƒëang b·∫£o tr√¨. **B·∫°n c√≥ th·ªÉ:**

*   **Ph·∫ßn "T√¨m hi·ªÉu":** Tham kh·∫£o th√¥ng tin dinh d∆∞·ª°ng chi ti·∫øt
*   **Theo d√µi th·ª±c ph·∫©m:** S·ª≠ d·ª•ng t√≠nh nƒÉng tracking
*   **Th·ª≠ l·∫°i sau:** H·ªá th·ªëng s·∫Ω ho·∫°t ƒë·ªông tr·ªü l·∫°i s·ªõm

üîÑ **Ch√∫ng t√¥i ƒëang kh·∫Øc ph·ª•c s·ª± c·ªë ƒë·ªÉ mang ƒë·∫øn tr·∫£i nghi·ªám t·ªët nh·∫•t!**`;
};
